%{
	#include <iostream>
	#include <stdlib.h>
	#include "hw3_output.hpp"
    #include "yysType.hpp"
	#include "symbolTable.hpp"

    using namespace output;
	using namespace std;
	extern int yylex();
	extern int yylineno ;
	int yyerror(const char * message);
	globalStack st;
%}

%token VOID;
%token INT;
%token BYTE;
%token B;
%token BOOL;

%token TRUE;
%token FALSE;
%token RETURN;
%token IF;
%token WHILE;

%token BREAK;
%token CONTINUE;
%token SC ;
%token COMMA;
%token LPAREN;

%token LBRACE;
%token RBRACE;
%token ID;
%token NUM;
%token STRING ;

%union{
 stype* yystype;
 int *integer;
 string * str;
}

%right ASSIGN;
%left OR;
%left AND;

%left EQRELOP;
%nonassoc RELOP ;
%left BINOP  ;
%left MULTBINOP ;
%right IF ;
%right NOT;
%left RPAREN;
%nonassoc ELSE;
%nonassoc ultimate;


%type <yystype> VOID;
%type <yystype> INT;
%type <yystype> BYTE;
%type <yystype> B;
%type <yystype> BOOL;

%type <yystype> TRUE;
%type <yystype> FALSE;
%type <yystype> RETURN;
%type <yystype> IF;
%type <yystype> WHILE;

%type <yystype> BREAK;
%type <yystype> CONTINUE ;
%type <yystype> SC;
%type <yystype> COMMA;
%type <yystype> LPAREN;
%type <yystype> Formals;
%type <yystype> FormalsList;
%type <yystype> ExpList;
%type <yystype> FormalDecl;
%type <yystype> LBRACE;
%type <yystype> RBRACE;
%type <str> ID;
%type <integer> NUM;
%type <str> STRING;
%type <yystype> Exp;
%type <yystype> Type;
%type <yystype> RetType;
%type <yystype> Call;

%type <yystype> EQRELOP;
%type <yystype> RELOP;
%type <yystype> BINOP;
%type <yystype> MULTBINOP;
%type <yystype> NOT;
%type <yystype> RPAREN;
%type <yystype> ELSE;

%%

/*1 X */Program : Funcs{};
/*2 V */Funcs: {};
/*3 V */Funcs : FuncDecl Funcs {};
/*4 X */FuncDecl : RetType ID LPAREN Formals RPAREN {st.isFuncNotInTable(*$2); st.openScope(false, $4->varNames.size()); st.addFunc(*$2,$4->varTypes, $4->varNames , $1->type, false);} LBRACE Statements RBRACE {
                        st.printAndExitScope();
                    };

/*5 V */RetType : Type {$$=new stype($1->type);};
/*6 V */RetType : VOID {$$=new stype("VOID");};
/*7 V */Formals : {$$ = new stype();};
/*8 V */Formals : FormalsList {
      $$->varNames=$1->varNames;
       $$->varTypes=$1->varTypes;
};
/*9 V */FormalsList : FormalDecl {
        $$->varNames=$1->varNames;
               $$->varTypes=$1->varTypes;
};
         //   list = decl;
/*10V */    | FormalDecl COMMA FormalsList {
            $$->varNames=$1->varNames;
               $$->varTypes=$1->varTypes;
               $$->varNames.insert($$->varNames.end(),$3->varNames.begin(),$3->varNames.end());
               $$->varTypes.insert($$->varTypes.end(),$3->varTypes.begin(),$3->varTypes.end());

};
             // int i,h,...;
/*11V */    FormalDecl: Type ID {
            $$->varTypes.push_back($1->type);
            $$->varNames.push_back(*$2);
};



/*12V */Statements : Statement {}
/*13V */             |Statements Statement {}
            ;

/*14X */Statement :  LBRACE{st.openScope(false);} Statements RBRACE {
                        st.printAndExitScope();
                        // anything else
                        //remember to add marker
                        }
/*15V */               |Type ID SC {
    st.addToCurrentStack(*$2,$1->type);
}
/*16V */              |Type ID ASSIGN Exp SC {
    if(st.getType(*$2)==$4->type||(st.getType(*$2)=="INT" &&$4->type=="BYTE"))
    {
        st.addToCurrentStack(*$2,$1->type);
    }
    else
    {
            errorMismatch(yylineno);
                        exit(1);
    }

}
/*17V */              |ID ASSIGN Exp SC {
        st.isVarInTable(*$1);
        if(st.getType(*$1)!=$3->type&&(st.getType(*$1)!="INT" ||$3->type!="BYTE"))
        {
            errorMismatch(yylineno);
            exit(1);
        }
}
                       // X=3;
/*18V */               |Call SC {}
/*19V */              |RETURN SC {st.checkRetType();}//compare return type
/*20V */           |RETURN Exp SC {st.checkRetType($2->type);}

/*21V */    |IF LPAREN  IFMarker RPAREN Statement CloseIFMarker;
IFMarker : Exp{ if($1->type=="BOOL")
                {
                st.openScope(false);
                }
               else
               {
               errorMismatch(yylineno);
                                   exit(1);
               }

           };
CloseIFMarker :{st.printAndExitScope();}
/*22V */ Statement   :IF LPAREN  IFMarker RPAREN Statement CloseIFMarker

                           ELSE
                          {
                             st.openScope(false);
                          }
                          Statement {st.printAndExitScope();}
/*23V */    |WHILE LPAREN Exp{ if($3->type=="BOOL")
                                {
                                st.openScope(true);
                                }
                               else
                               {
                               errorMismatch(yylineno);
                                                   exit(1);
                               }

                           }
                            RPAREN Statement {st.printAndExitScope();}{}
/*24V */    |BREAK SC {
                if(!st.isInLoop()){
                    errorUnexpectedBreak(yylineno);
                    exit(1);
                }
            }
/*25V */    |CONTINUE SC {
                if(!st.isInLoop()){
                    errorUnexpectedContinue(yylineno);
                    exit(1);
                }
            }
            ;
/*26V */ Call  : ID LPAREN ExpList RPAREN {st.isFuncInTable(*$1);
                                          st.isTypesMatchingFunc(*$1,$3->varTypes);
                                          $$ = new stype(st.getRetType(*$1));}
/*27V */    |ID LPAREN RPAREN {st.isFuncInTable(*$1);

                            $$->type=st.getRetType(*$1);}
            ;
/*28V? */    ExpList    : Exp {$$->varTypes.push_back($1->type);}
/*29V? */                |Exp COMMA ExpList{$$->varTypes.push_back($1->type);$$->varTypes.insert($$->varTypes.end(),$3->varTypes.begin(),$3->varTypes.end());}
            ;
/*30V */Type: INT {$$=new stype("INT");}
/*31V */    |BYTE {$$=new stype("BYTE");}
/*32V */    |BOOL {$$=new stype("BOOL");}
            ;

/*33V */Exp  : LPAREN Exp RPAREN {$$ = new stype($2->type);}
/*34X (new one) */    |Exp IF LPAREN Exp RPAREN ELSE Exp{}
/*35V */     |Exp MULTBINOP Exp

            {
                if(($1->type == "INT" || $1->type == "BYTE") && ($3->type == "INT" || $3->type == "BYTE"))
                {


                   if($1->type == "BYTE" && $3->type == "BYTE")
                   {
                       $$ = new stype("BYTE");
                   }
                   else
                   {
                       $$ = new stype("INT");
                   }
                }
                else
                {
                    errorMismatch(yylineno);
                    exit(1);
                }

            }
/*36V */     |Exp BINOP Exp
            {
                if(($1->type == "INT" || $1->type == "BYTE") && ($3->type == "INT" || $3->type == "BYTE"))
                {


                   if($1->type == "BYTE" && $3->type == "BYTE")
                   {
                       $$ = new stype("BYTE");
                   }
                   else
                   {
                       $$ = new stype("INT"); // $$ = new stype("INT")
                   }
                }
                else
                {
                    errorMismatch(yylineno);
                    exit(1);
                }
            }
/*37V */    |ID {st.isVarInTable(*$1);
            $$ = new stype(st.getType(*$1)); //int i = c;
            //will bring type
            }
/*38V */    |Call {$$ = new stype($1->type);}
/*39V */    |NUM {
            $$=new stype("INT", "NUM", *$1);
            }

/*40V */   |NUM B {
                       if (*$1>255)
                        {
                            output::errorByteTooLarge(yylineno,to_string(*$1));
                            exit(1);
                        }
                        $$=new stype("BYTE");

                    }
/*41V */    |STRING {}
/*42V */    |TRUE {$$=new stype("BOOL");}
/*43V */    |FALSE {$$=new stype("BOOL");}
/*44V */    |NOT Exp
            {
                if($2->type != "BOOL")
                    {
                    errorMismatch(yylineno);
                    exit(1);
                    }
                else
                    {
                        $$=new stype("BOOL");
                    }
            }
/*45V */    |Exp AND Exp {
                 if($1->type == "BOOL" && $3->type == "BOOL")
                 {
                    $$=new stype("BOOL");
                 }
                 else
                 {
                     errorMismatch(yylineno);
                     exit(1);
                 }
             }
/*46V */    |Exp OR Exp {
            if($1->type == "BOOL" && $3->type == "BOOL")
              {
                 $$=new stype("BOOL");
              }
              else
              {
                  errorMismatch(yylineno);
                  exit(1);
              }
            }
/*47V */    |Exp EQRELOP Exp {
                if(($1->type == "INT" || $1->type == "BYTE") && ($3->type == "INT" || $3->type == "BYTE"))
                {

                $$=new stype("BOOL");
                   /*if(($1->type == "BYTE" && $3->type == "BYTE")
                   {
                       $$=new stype("BYTE");
                   }
                   else
                   {
                       $$=new stype("INT");
                   }*/
                }
                else
                {
                    errorMismatch(yylineno);
                    exit(1);
                }

            }

 /*48V */   |Exp RELOP Exp {
                if(($1->type == "INT" || $1->type == "BYTE") && ($3->type == "INT" || $3->type == "BYTE"))
                {

                $$=new stype("BOOL");

                }
                else
                {
                    errorMismatch(yylineno);
                    exit(1);
                }
            }
/*49V */    |LPAREN Type RPAREN Exp {
                                        if(($2->type == "INT" || $2->type == "BYTE") && ($4->type == "INT" || $4->type == "BYTE"))
                                        {
                                            $$= new stype($2->type);
                                        }
                                        else
                                        {
                                            errorMismatch(yylineno);
                                            exit(1);
                                        }
                                     }
            ;//(int) notint
%%


int main()
{
    //add print and printi to the functions stack
    vector<string> names{"doesn't matter"};
    vector<string> types{"STRING"};
    st.addFunc("print", types, names, "VOID", true);
    vector<string> namesi{"doesn't matter"};
    vector<string> typesi{"INT"};
    st.addFunc("printi", typesi, namesi, "VOID", true);

	yyparse();
	if(!st.wasThereAMain){
        errorMainMissing();
        exit(1);
	}
    st.closeFinal();
}

int yyerror(const char * message)
{
	errorSyn(yylineno);
	exit(0);
}
